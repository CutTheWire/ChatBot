worker_processes 1;

events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        server_name localhost;  # Nginx가 요청을 처리할 도메인/호스트 이름

        root /usr/share/nginx/html;  # React 정적 파일 경로
        index index.html index.htm;

        # 타임아웃 설정 10분(600초)으로 조정
        proxy_connect_timeout 600s;    # 연결 타임아웃
        proxy_send_timeout 600s;       # 요청 데이터 전송 타임아웃
        proxy_read_timeout 600s;       # 응답 대기 타임아웃
        send_timeout 600s;             # 데이터 송신 타임아웃

        # React 애플리케이션의 정적 파일 처리
        location / {
            try_files $uri $uri/ /index.html;   # 요청 경로가 없을 경우 index.html로 전달
            
            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' '*';
        }

        # FastAPI에 요청을 전달하는 경로
        location /sub {
            proxy_pass http://fastapi:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Spring Boot에 요청을 전달하는 경로
        location /server {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /server/oauth/callback/kakao {
            proxy_pass http://springboot:8080/server/oauth/callback/kakao;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;  # 추가
            proxy_set_header Upgrade $http_upgrade;  # 추가
            proxy_set_header Connection "upgrade";  # 추가
            
            # 디버깅을 위한 로깅 추가
            error_log /var/log/nginx/kakao_callback_error.log debug;
            access_log /var/log/nginx/kakao_callback_access.log;

            # CORS 헤더
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' '*';
        }
        
        # CORS 헤더 추가
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type";
    }
}

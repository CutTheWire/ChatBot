worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # 로그 포맷 정의
    log_format detailed_log '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'request_body="$request_body" '
                          'upstream_response_time="$upstream_response_time" '
                          'upstream_status="$upstream_status"';

    server {
        listen 80;
        server_name localhost;  # Nginx가 요청을 처리할 도메인/호스트 이름

        root /usr/share/nginx/html;  # React 정적 파일 경로
        index index.html index.htm;

        # 타임아웃 설정 10분(600초)으로 조정
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        send_timeout 600s;

        # React 애플리케이션의 정적 파일 처리
        location / {
            try_files $uri $uri/ /index.html;
            
            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' '*';

            # React 관련 로깅
            error_log /var/log/nginx/react_error.log debug;
            access_log /var/log/nginx/react_access.log detailed_log;
        }

        # FastAPI에 요청을 전달하는 경로
        location /sub {
            proxy_pass http://fastapi:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # FastAPI 관련 로깅
            error_log /var/log/nginx/fastapi_error.log debug;
            access_log /var/log/nginx/fastapi_access.log detailed_log;
        }

        # Spring Boot에 요청을 전달하는 경로
        location /server {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Spring Boot 관련 상세 로깅
            error_log /var/log/nginx/server_error.log debug;
            access_log /var/log/nginx/server_access.log detailed_log;
        }

        # 카카오 로그인 요청 처리
        location /server/user/social/kakao/login {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS 헤더 수정
            add_header 'Access-Control-Allow-Origin' $http_origin always;  # 동적 Origin 허용
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # Kakao OAuth Callback 경로 처리
        location /server/oauth/callback/kakao {
            proxy_pass http://springboot:8080/server/user/oauth/callback/kakao;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin "http://localhost";  # 추가

            # CORS 헤더 수정
            add_header 'Access-Control-Allow-Origin' 'http://localhost';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' '*';
        }
    }
}
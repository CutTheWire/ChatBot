http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format detailed_log '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'request_body="$request_body" '
                          'upstream_response_time="$upstream_response_time" '
                          'upstream_status="$upstream_status"';

    server {
        listen 443 ssl;
        server_name treenut.ddns.net;

        ssl_certificate /etc/nginx/certs/treenut.ddns.net_2025040424819.crt.pem;
        ssl_certificate_key /etc/nginx/certs/treenut.ddns.net_2025040424819.key.pem;
        ssl_trusted_certificate /etc/nginx/certs/chain-bundle.pem; # 또는 root-chain-bundle.pem 또는 두개의 체인파일을 합친 파일
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
        ssl_session_tickets off;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        root /usr/share/nginx/html;
        index index.html index.htm;

        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        send_timeout 600s;

        # 정적 파일 처리를 위한 위치 - React 빌드의 static 폴더 
        location /static/ {
            root /usr/share/nginx/html;  # /usr/share/nginx/html/static/ 폴더를 가리킴
            expires 7d;
            add_header Cache-Control "public, max-age=604800";
            access_log off;
            try_files $uri =404;
        }

        # 정적 파일 위치를 명시적으로 추가 (다른 블록 위에 배치)
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            root /usr/share/nginx/html;
            try_files $uri =404;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            access_log off;
        }

        # React 애플리케이션의 정적 파일 처리
        location / {
            try_files $uri $uri/ /index.html;

            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;

            # React 관련 로깅
            error_log /var/log/nginx/react_error.log debug;
            access_log /var/log/nginx/react_access.log detailed_log;
        }

        # FastAPI에 요청을 전달하는 경로
        location /sub {
            proxy_pass http://fastapi:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # FastAPI 관련 로깅
            error_log /var/log/nginx/fastapi_error.log debug;
            access_log /var/log/nginx/fastapi_access.log detailed_log;
        }

        # Spring Boot에 요청을 전달하는 경로
        location /server {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Spring Boot 관련 상세 로깅
            error_log /var/log/nginx/server_error.log debug;
            access_log /var/log/nginx/server_access.log detailed_log;
        }

        # 카카오 로그인 요청 처리
        location /server/user/social/kakao/login {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS 헤더 수정
            add_header 'Access-Control-Allow-Origin' $http_origin always;  # 동적 Origin 허용
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # Kakao OAuth Callback 경로 처리
        location /server/oauth/callback/kakao {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS 헤더 수정
            add_header 'Access-Control-Allow-Origin' '$http_origin' always; # 동적 Origin 허용
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # 구글 로그인 요청 처리 부분 수정
        location /server/user/social/google/login {
            # OPTIONS 메소드 처리 추가
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS 및 COOP 헤더 설정
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            
            # COOP 및 COEP 헤더 추가
            add_header 'Cross-Origin-Opener-Policy' 'same-origin-allow-popups' always;
            add_header 'Cross-Origin-Embedder-Policy' 'require-corp' always;
        }

        # Google OAuth Callback 경로에도 동일하게 적용
        location /server/oauth/callback/google {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS 및 COOP 헤더 설정
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            
            # COOP 및 COEP 헤더 추가
            add_header 'Cross-Origin-Opener-Policy' 'same-origin-allow-popups' always;
            add_header 'Cross-Origin-Embedder-Policy' 'require-corp' always;
        }
    }
}

events {
    worker_connections  1024;
}